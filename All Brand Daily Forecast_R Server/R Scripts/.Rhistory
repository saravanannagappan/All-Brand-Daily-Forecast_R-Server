# combining the row vectors in matrices, then converting the matrix into a data frame
input = as.data.frame(rbind(control, test))
# assigning column names to this data frame
names(input) = c('click', 'no click')
# input
################################## RUN THE CHI-SQUARED TEST #############################################
# Ho: There is no association between the two examined variables (e.g. between gender and ice cream taste)
# Ha: There is association between the two examined variables.
# (if Ha, male and female have different ice cream taste)
results = chisq.test(input)
results
control = c(8677,	1329613)
test = c(9755, 1327702)
# combining the row vectors in matrices, then converting the matrix into a data frame
input = as.data.frame(rbind(control, test))
# assigning column names to this data frame
names(input) = c('click', 'no click')
# input
################################## RUN THE CHI-SQUARED TEST #############################################
# Ho: There is no association between the two examined variables (e.g. between gender and ice cream taste)
# Ha: There is association between the two examined variables.
# (if Ha, male and female have different ice cream taste)
results = chisq.test(input)
results
control = c(108944, 1229346)
test = c(85102,	1252355)
# combining the row vectors in matrices, then converting the matrix into a data frame
input = as.data.frame(rbind(control, test))
# assigning column names to this data frame
names(input) = c('click', 'no click')
# input
################################## RUN THE CHI-SQUARED TEST #############################################
# Ho: There is no association between the two examined variables (e.g. between gender and ice cream taste)
# Ha: There is association between the two examined variables.
# (if Ha, male and female have different ice cream taste)
results = chisq.test(input)
results
? power.prop.test
power.prop.test(p1=0.0015, p2=0.0018, power=0.8, alternative='two.sided', sig.level=0.05)
? pwr.t.test
?pwr.t.test
install.packages('pwr')
require('pwr')
?"pwr.t.test"
pwr.t.test(d=2.8,n=30,sig.level=0.05,type="two.sample",alternative="two.sided")
pwr.t.test(d=1,n=30,sig.level=0.05,type="two.sample",alternative="two.sided")
pwr.t.test(d=0.3,power=0.75,sig.level=0.05,type="two.sample",alternative="greater")
pwr.t.test(n=120,power=0.75,sig.level=0.05,type="two.sample",alternative="two.sided")
require(EoinForecast)
require(EoinForecast)
install.packages('prophet')
library(prophet)
library(dplyr)
df <- read.csv('../examples/example_wp_peyton_manning.csv')
holiday_name <- 'thanksgiving'
holiday_dates <- as.Date(c('2012-11-22','2013-11-28','2014-11-27','2015-11-26','2016-11-24'))
lower_window <- 4
upper_window <- 2
require('lubridate')
require('zoo')
holiday_dates.lw1 <- holiday_dates - days(1)
(holiday_dates.lw1 <- holiday_dates - days(1))
(holiday_dates.lw1 <- holiday_dates - days(30))
require(R.utils)
if(isPackageLoaded('data.table')) detach("package:data.table", unload = TRUE)
require(lubridate)
# Input parameters (start_date, end_date)
start_date <- as.Date('2012-01-01')
end_date <- as.Date('2016-12-31')
#---- Create a data frame of date range
# Columns: Dates, Year of Date (YoD), Month of Year(MoY), Week of Year (WoY), and Day of Week (DoW)
dateframe <- data.frame(date = seq(start_date, end_date, 'day')
, stringsAsFactors=FALSE)
dateframe <- cbind(dateframe
, YoD = year(dateframe$date)
, MoY = month(dateframe$date, label = TRUE)
, WoY = week(dateframe$date)
, DoW = wday(dateframe$date,label = TRUE))
#---- Indexing Day of Week in a Month in a Year.
# This is to support identifying the holidays marked by Day of Week in a certain month (e.g. Thanksgiving, Super Bowl)
require(data.table)
dateframe <- data.table(dateframe)
dateframe[, DoWoMIndex := seq_len(.N), by = c('YoD', 'MoY', 'DoW')]
#---- Identify the holidays of the years. Each of the holiday will be a binary column
# Thanksgivings - the fourth Thursday of November
dateframe$Thanksgiving <- ifelse(dateframe$MoY == 'Nov' & dateframe$DoW == 'Thurs'
& dateframe$DoWoMIndex == 4, 1, 0)
# Christmas
dateframe$Christmas <- ifelse(dateframe$MoY == 'Dec' & day(dateframe$date) == 25, 1, 0)
# Super Bowl
dateframe$SuperBowl <- ifelse(dateframe$MoY == 'Feb' & dateframe$DoW == 'Sun' & dateframe$DoWoMIndex == 1, 1, 0)
# Valentine
dateframe$Valentine <- ifelse(dateframe$MoY == 'Feb' & day(dateframe$date) == 14, 1, 0)
# Easter
require(timeDate)
easters <- Easter(year(start_date):year(end_date))
easterframe <- data.frame(date = as.Date.timeDate(easters), Easter = 1)
dateframe <- merge(dateframe, easterframe, by = 'date', all.x = TRUE)
dateframe$Easter <- ifelse(is.na(dateframe$Easter),0,1)
# July4th
dateframe$July4th <- ifelse(dateframe$MoY == 'Jul' & day(dateframe$date) == 4, 1, 0)
# NewYear
dateframe$NewYear <- ifelse(dateframe$MoY == 'Jan' & day(dateframe$date) == 1, 1, 0)
View(dateframe)
View(dateframe[dateframe$Thanksgiving == 1,date])
View(dateframe[dateframe$Christmas == 1,date])
View(dateframe[dateframe$NewYear == 1,date])
dateframe[dateframe$SuperBowl == 1,date]
dateframe[dateframe$Valentine == 1,date]
dateframe[dateframe$Easter == 1,date]
dateframe[dateframe$July4th == 1,date]
source('C:/Users/cnguyen/Desktop/MREP-517 Examine Daily Forecast Techniques in R/R scripts/Utility Functions/generateHolidayDates.R', echo=TRUE)
generateHolidayDates <- function(start_date, end_date){
# Make sure we have not loaded "data.table" package before loading the "lubridate" package
# as it would mask some functions in the "lubridate" package.
require(R.utils)
if(isPackageLoaded('data.table')) detach("package:data.table", unload = TRUE)
#---- Create a data frame of date range
# Columns: Dates, Year of Date (YoD), Month of Year(MoY), Week of Year (WoY), and Day of Week (DoW)
require(lubridate)
dateframe <- data.frame(date = seq(start_date, end_date, 'day')
, stringsAsFactors=FALSE)
dateframe <- cbind(dateframe
, YoD = year(dateframe$date)
, MoY = month(dateframe$date, label = TRUE)
, WoY = week(dateframe$date)
, DoW = wday(dateframe$date,label = TRUE))
#---- Indexing Day of Week in a Month in a Year.
# This is to support identifying the holidays marked by Day of Week in a certain month (e.g. Thanksgiving, Super Bowl)
require(data.table)
dateframe <- data.table(dateframe)
dateframe[, DoWoMIndex := seq_len(.N), by = c('YoD', 'MoY', 'DoW')]
#---- Identify the holidays of the years. Each of the holiday will be a binary column
# Thanksgivings - the fourth Thursday of November
dateframe$Thanksgiving <- ifelse(dateframe$MoY == 'Nov' & dateframe$DoW == 'Thurs'
& dateframe$DoWoMIndex == 4, 1, 0)
# Christmas
dateframe$Christmas <- ifelse(dateframe$MoY == 'Dec' & day(dateframe$date) == 25, 1, 0)
# Super Bowl
dateframe$SuperBowl <- ifelse(dateframe$MoY == 'Feb' & dateframe$DoW == 'Sun' & dateframe$DoWoMIndex == 1, 1, 0)
# Valentine
dateframe$Valentine <- ifelse(dateframe$MoY == 'Feb' & day(dateframe$date) == 14, 1, 0)
# Easter
require(timeDate)
easters <- Easter(year(start_date):year(end_date))
easterframe <- data.frame(date = as.Date.timeDate(easters), Easter = 1)
dateframe <- merge(dateframe, easterframe, by = 'date', all.x = TRUE)
dateframe$Easter <- ifelse(is.na(dateframe$Easter),0,1)
# July4th
dateframe$July4th <- ifelse(dateframe$MoY == 'Jul' & day(dateframe$date) == 4, 1, 0)
# NewYear
dateframe$NewYear <- ifelse(dateframe$MoY == 'Jan' & day(dateframe$date) == 1, 1, 0)
return(as.data.frame(dateframe))
}
output <- generateHolidayDates(start_date = as.Date('2012-01-01'), end_date = as.Date('2016-12-31'))
View(output)
start_date = as.Date('2014-01-01')
end_date = as.Date('2017-12-31')
# Make sure we have not loaded "data.table" package before loading the "lubridate" package
# as it would mask some functions in the "lubridate" package.
require(R.utils)
if(isPackageLoaded('data.table')) detach("package:data.table", unload = TRUE)
#---- Create a data frame of date range
# Columns: Dates, Year of Date (YoD), Month of Year(MoY), Week of Year (WoY), and Day of Week (DoW)
require(lubridate)
dateframe <- data.frame(date = seq(start_date, end_date, 'day')
, stringsAsFactors=FALSE)
dateframe <- cbind(dateframe
, YoD = year(dateframe$date)
, MoY = month(dateframe$date, label = TRUE)
, WoY = week(dateframe$date)
, DoW = wday(dateframe$date,label = TRUE))
require(data.table)
dateframe <- data.table(dateframe)
dateframe[, DoWoMIndex := seq_len(.N), by = c('YoD', 'MoY', 'DoW')]
dateframe$Thanksgiving <- ifelse(dateframe$MoY == 'Nov' & dateframe$DoW == 'Thurs'
& dateframe$DoWoMIndex == 4, 1, 0)
# Christmas
dateframe$Christmas <- ifelse(dateframe$MoY == 'Dec' & day(dateframe$date) == 25, 1, 0)
# Super Bowl
dateframe$SuperBowl <- ifelse(dateframe$MoY == 'Feb' & dateframe$DoW == 'Sun' & dateframe$DoWoMIndex == 1, 1, 0)
# Valentine
dateframe$Valentine <- ifelse(dateframe$MoY == 'Feb' & day(dateframe$date) == 14, 1, 0)
# Easter
require(timeDate)
easters <- Easter(year(start_date):year(end_date))
easterframe <- data.frame(date = as.Date.timeDate(easters), Easter = 1)
dateframe <- merge(dateframe, easterframe, by = 'date', all.x = TRUE)
dateframe$Easter <- ifelse(is.na(dateframe$Easter),0,1)
dateframe$StPatricks <- ifelse(dateframe$MoY == 'Mar' & day(dateframe$date) == 17, 1, 0)
# Cinco_de_Mayo
dateframe$Cinco_de_Mayo <- ifelse(dateframe$MoY == 'May' & day(dateframe$date) == 05, 1, 0)
# MothersDay - 2nd Sunday of May
dateframe$MothersDay <- ifelse(dateframe$MoY == 'May' & dateframe$DoW == 'Sun' & dateframe$DoWoMIndex == 2, 1, 0)
memorialframe <- dateframe[dateframe[, j = .I[DoWoMIndex == max(DoWoMIndex) & MoY == 'May' & DoW == 'Mon']
, by = .(YoD, MoY, DoW)]$V1]
memorialframe <- cbind(memorialframe, MemorialDay = 1)
test <- memorialframe[,c('date','MemorialDay')]
test
test <- memorialframe[c('date','MemorialDay')]
test <- memorialframe[c('date','MemorialDay')]
test <- memorialframe[c("date","MemorialDay")]
test <- memorialframe[, c("date","MemorialDay")]
test
?which
test <- memorialframe[, which(names(memorialframe) %in% c('date','MemorialDay'))]
test
test <- memorialframe[,which(names(memorialframe) %in% c('date','MemorialDay'))]
test
memorialframe <- cbind(memorialframe, MemorialDay = 1)
memorialframe
test <- memorialframe[,which(names(memorialframe) %in% c('date','MemorialDay'))]
test
memorialframe <- dateframe[dateframe[, j = .I[DoWoMIndex == max(DoWoMIndex) & MoY == 'May' & DoW == 'Mon']
, by = .(YoD, MoY, DoW)]$V1]
memorialframe <- cbind(memorialframe, MemorialDay = 1)
memorialframe
test <- memorialframe[,which(names(memorialframe) %in% c('date','MemorialDay'))]
test
test <- memorialframe[, c('date','MemorialDay')]
test
test <- memorialframe[, which(names(memorialframe) %in% c('date','MemorialDay'))]
test
is.data.frame(memorialframe)
memorialframe <- cbind(memorialframe, MemorialDay = 1)
test <- memorialframe[, which(names(memorialframe) %in% c('date','MemorialDay'))]
test
memorialframe <- dateframe[dateframe[, j = .I[DoWoMIndex == max(DoWoMIndex) & MoY == 'May' & DoW == 'Mon']
, by = .(YoD, MoY, DoW)]$V1]
memorialframe <- cbind(memorialframe, MemorialDay = 1)
test <- memorialframe[, which(names(memorialframe) %in% c('date','MemorialDay'))]
test
test <- memorialframe[ ,-which(names(memorialframe) %in% c('date','MemorialDay'))]
test
memorialframe <- cbind(memorialframe, MemorialDay = 1)
is.data.frame(memorialframe)
memorialframe
cols = paste("V", c(1,2,3,5), sep="")
cols
test <- memorialframe[ ,"date MemorialDay", with = FALSE]
test <- memorialframe[ ,c("date", "MemorialDay"), with = FALSE]
test
?data.table
memorialframe <- dateframe[dateframe[, j = .I[DoWoMIndex == max(DoWoMIndex) & MoY == 'May' & DoW == 'Mon']
, by = .(YoD, MoY, DoW)]$V1]
memorialframe <- cbind(memorialframe, MemorialDay = 1)
dateframe <- merge(dateframe, memorialframe[,c('date','MemorialDay'), with = FALSE], by = 'date', all.x = TRUE)
dateframe$MemorialDay <- ifelse(is.na(dateframe$MemorialDay),0,1)
View(dateframe)
data <- read.csv('../Data/Data-AllBrands.csv')
data$Date <- as.Date(data$Date, "%m/%d/%Y")
# View(data)
# Create a list of data frames. Each data frames correspond to the data of each brand,
# and have two columns (ds: Date, y: Visits)
# require('lubridate')
require('zoo')
brands <- list()
for (i in 2:ncol(data)) {
brand <- data[,c(1,i)] # Extract data for a single brand
# Trim off any NA values at the beginning and end of the time series
brand <- na.trim(brand)
# Change column names to ds, y
colnames(brand) <- c("ds", "y")
# Add the data for a brand to the brands list
brands[[length(brands)+1]] <- brand
}
# Assign the brand names to the corresponding data frames in the brands list
names(brands) <- names(data[,-1])
############################################ END OF DATA INPUT ###################################################
####################################### LOAD THE UTILITY FUNCTIONS ###############################################
#---------- Function Definition - sourceEntireFolder ----------------------------
# This function is to find all .R files within a folder and sources them.
sourceEntireFolder <- function(folderName, verbose=FALSE, showWarnings=TRUE) {
files <- list.files(folderName, full.names=TRUE)
# Grab only R files
files <- files[ grepl("\\.[rR]$", files) ]
if (!length(files) && showWarnings)
warning("No R files in ", folderName)
for (f in files) {
if (verbose)
cat("sourcing: ", f, "\n")
## TODO:  add caught whether error or not and return that
try(source(f, local=FALSE, echo=TRUE), silent=!verbose)
}
return(invisible(NULL))
}
#--------------------------------------------------------------------------------
#### Go to the folder "Utility Functions" to define all the neccessary unitily functions
# The functions are: rmse, mape, generateHolidayDates, generateHolidayRanges
# Assumption: We are in the folder "R Scripts"
sourceEntireFolder(folderName = "./Utility Functions", verbose = TRUE)
################################# RUN THE FORECAST SCRIPTS FOR EACH BRAND #######################################
# Run the daily forecasts for each brand from the forecast scripts
# Assumption: The script names contains the brand names & the brand names match those in the input data
#----- Global Forecast Configuration ----------
# The variables below define general forecast requirements and to be passed to individual brand forecast scripts.
# actual_end - the last date of the historical data
actual_end <- as.Date("2017-06-30")
# fc_periods - the numbers of days we want to forecast ahead
fc_periods <- 365
# predicts - the data frame that collects the predicts from the forecast models for individual brands
#            for both historical time and forecast time.
#            This information will be used to evaluate the model performance
require(lubridate)
predicts <- data.frame(ds = seq(min(data$Date), actual_end + days(fc_periods), 'day'))
# View(predicts)
# results - the data frame that collects the forecast results from the forecast scripts for each
#           brand.
require(lubridate)
results <- data.frame(ds = seq(actual_end + days(1), actual_end + days(fc_periods), 'day'))
library(optparse)
option_list = list(
make_option(c("-f", "--file"), type="character", default=NULL,
help="dataset file name", metavar="character"),
make_option(c("-o", "--out"), type="character", default="out.txt",
help="output file name [default= %default]", metavar="character")
);
opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);
?make_option
option_list = list(
# path to the input file
make_option(
opt_str = c("-in", "--input_path")
, type="character"
, default=NULL
, help="The path to the input file."
, metavar="character"
)
# path to the output file
, make_option(
opt_str = c("-o", "--output_path")
, type="character"
, default=NULL
, help="The path to the output file."
, metavar="character"
)
# path to the log file
, make_option(
opt_str = c("-log", "--log_path")
, type="character"
, default=NULL
, help="The path to the log file."
, metavar="character"
)
# # actual_end - the last date of historical data
# , make_option(
#   opt_str = c("-actual", "--log_path")
#   , type="character"
#   , default=NULL
#   , help="The path to the log file."
#   , metavar="character"
# )
# # fc_periods - # periods to be forecasted e.g.# forecasting days
# , make_option(
#   opt_str = c("-actual", "--log_path")
#   , type="character"
#   , default=NULL
#   , help="The path to the log file."
#   , metavar="character"
# )
);
opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);
?OptionParser
?parse_args
?stop
?make_option
?sink
?rm
source('C:/Users/cnguyen/Desktop/All Brand Daily Forecast Project/All Brand Daily Forecast_Export Log File/R Scripts/Daily_Forecasting-Master_Script_v3.R', echo=TRUE)
install.packages('forecast')
install.packages('fpp')
install.packages('prophet')
source('C:/Users/cnguyen/Desktop/All Brand Daily Forecast Project/All Brand Daily Forecast_Export Log File/R Scripts/Daily_Forecasting-Master_Script_v3.R', echo=TRUE)
source('C:/Users/cnguyen/Desktop/All Brand Daily Forecast Project/All Brand Daily Forecast_Export Log File/R Scripts/Daily_Forecasting-Master_Script_v3.R', echo=TRUE)
source('C:/Users/cnguyen/Desktop/All Brand Daily Forecast Project/All Brand Daily Forecast_Export Log File/R Scripts/Daily_Forecasting-Master_Script_v3.R', echo=TRUE)
install.packages("jsonlite")
?set.seed
t.test2 <- function(m1,m2,s1,s2,n1,n2,m0=0,equal.variance=FALSE)
{
if( equal.variance==FALSE )
{
se <- sqrt( (s1^2/n1) + (s2^2/n2) )
# welch-satterthwaite df
df <- ( (s1^2/n1 + s2^2/n2)^2 )/( (s1^2/n1)^2/(n1-1) + (s2^2/n2)^2/(n2-1) )
} else
{
# pooled standard deviation, scaled by the sample sizes
se <- sqrt( (1/n1 + 1/n2) * ((n1-1)*s1^2 + (n2-1)*s2^2)/(n1+n2-2) )
df <- n1+n2-2
}
t <- (m1-m2-m0)/se
dat <- c(m1-m2, se, t, 2*pt(-abs(t),df))
names(dat) <- c("Difference of means", "Std Error", "t", "p-value")
return(dat)
}
t.test2( 2.45, 2.63, 5.60, 9.86, 29945151, 1599238)
t.test2(0.123, 0.145, 0.73, 0.73, 29945151, 1599238)
?install.packages
require(lubridate)
?format
require(ggplot2)
?ggplotly
require(plotly)
?ggplotly
?subplot
install.packages("dplyr")
require(dplyr)
install.packages("tidyverse")
install.packages("statsr")
library(tidyverse)
library(statsr)
library(statsr)
data(brfss)
library(statsr)
data(brfss)
class(brfss)
View(brfss)
library(tidyverse)
library(statsr)
data(brfss)
credible_interval_app()
# Type your code for Exercise 1 here.
# Type your code for the Exercise 2 here.
# Type your code for the Exercise 3 here.
table(brfss$sex)
n <- length(brfss$sex)
x <- sum(brfss$sex == "Female")
# Type your code for Question 7 here.
table(brfss$exercise)
# Type your code for Question 10 here.
# Type your code for Question 12 here.
# Type your code for the Exercise 6 here.
## Credible Interval Calculator
credible_interval_app()
qnorm(c(0.025, 0.975), mean = 10, sd = 2.236)
?qnorm
credible_interval_app()
table(brfss$sex)
n <- length(brfss$sex)
x <- sum(brfss$sex == "Female")
credible_interval_app()
qbeta(c(0.5), shape1 = 2, shape2 = 5)
qbeta(c(0.5), shape1 = 2, shape2 = 200)
qbeta(c(0.5), shape1 = 5, shape2 = 200)
## Credible Interval Calculator
credible_interval_app()
?dbGetQuery
source('C:/Users/cnguyen/Desktop/FY 2020 Forecasting/All Brand Daily Forecast_FY20/All Brand Daily Forecast_v03252019/R Scripts/Update Historical Data_Snowflake.R', echo=TRUE)
setwd("C:/Users/cnguyen/Desktop/FY 2020 Forecasting/All Brand Daily Forecast_FY20/All Brand Daily Forecast_v03252019/R Scripts")
source('C:/Users/cnguyen/Desktop/FY 2020 Forecasting/All Brand Daily Forecast_FY20/All Brand Daily Forecast_v03252019/R Scripts/Update Historical Data_Snowflake.R', echo=TRUE)
if (("RJDBC" %in% rownames(installed.packages())) == FALSE) install.packages("RJDBC")
require(RJDBC)
jdbcDriver <- JDBC(driverClass="net.snowflake.client.jdbc.SnowflakeDriver",
classPath="./snowflake-jdbc-3.7.0.jar") # <-- this is where I saved the jar file
require(RJDBC)
source('C:/Users/cnguyen/Desktop/FY 2020 Forecasting/All Brand Daily Forecast_FY20/All Brand Daily Forecast_v03252019/R Scripts/Update Historical Data_Snowflake.R', echo=TRUE)
if (("RJDBC" %in% rownames(installed.packages())) == FALSE) install.packages("RJDBC")
if (("zoo" %in% rownames(installed.packages())) == FALSE) install.packages("zoo")
if (("lubridate" %in% rownames(installed.packages())) == FALSE) install.packages("lubridate")
if (("prophet" %in% rownames(installed.packages())) == FALSE) install.packages("prophet")
if (("forecast" %in% rownames(installed.packages())) == FALSE) install.packages("forecast")
if (("dplyr" %in% rownames(installed.packages())) == FALSE) install.packages("dplyr")
####################################### LOAD THE UTILITY FUNCTIONS ###############################################
# Assumption: We are in the folder "R Scripts"
#---------- Function Definition - sourceEntireFolder ----------------------------
# This function is to find all .R files within a folder and sources them.
sourceEntireFolder <- function(folderName, verbose=FALSE, showWarnings=TRUE) {
files <- list.files(folderName, full.names=TRUE)
# Grab only R files
files <- files[ grepl("\\.[rR]$", files) ]
if (!length(files) && showWarnings)
warning("No R files in ", folderName)
for (f in files) {
if (verbose)
cat("sourcing: ", f, "\n")
## TODO:  add caught whether error or not and return that
try(source(f, local=FALSE, echo=FALSE), silent=!verbose)
}
return(invisible(NULL))
}
#--------------------------------------------------------------------------------
#### Go to the folder "Utility Functions" to define all the neccessary unitily functions
# The functions are: rmse, mape, generateHolidayDates, generateHolidayRanges
# Assumption: We are in the folder "R Scripts"
sourceEntireFolder(folderName = "./Utility Functions", verbose = TRUE)
# Load library
require(RJDBC)
# Specify driver
jdbcDriver <- JDBC(driverClass="net.snowflake.client.jdbc.SnowflakeDriver",
classPath="./snowflake-jdbc-3.7.0.jar") # <-- this is where I saved the jar file
# Create a connection
# This is the most critical part.
# You have to make sure you enter your SSO path as well as corp username with domain
#---- This is for single sign-on login
# con <- dbConnect(jdbcDriver, "jdbc:snowflake://meredith.us-east-1.snowflakecomputing.com/?authenticator=externalbrowser",
#                            'username@domain.com', 'password')
#---- This uses service account credentials
con <- dbConnect(jdbcDriver, "jdbc:snowflake://meredith.us-east-1.snowflakecomputing.com",
'SA_DSA_ETL_PROD', 'DSA@Snowflake2019')
# To query data, at this point, you are good to go. start querying data.
data.raw <- dbGetQuery(con, "Select * From sandbox.public.cuong_historical_data")
data <- data.raw
View(data)
# Close the connection
dbDisconnect(con)
source('C:/Users/cnguyen/Desktop/FY 2020 Forecasting/All Brand Daily Forecast_FY20/All Brand Daily Forecast_v03252019/R Scripts/Daily Forecasting-Master Script_Snowflake.R', echo=TRUE)
source('C:/Users/cnguyen/Desktop/FY 2020 Forecasting/All Brand Daily Forecast_FY20/All Brand Daily Forecast_v03252019/R Scripts/Daily Forecasting-Master Script_Snowflake.R', echo=TRUE)
source('C:/Users/cnguyen/Desktop/FY 2020 Forecasting/All Brand Daily Forecast_FY20/All Brand Daily Forecast_v03252019/R Scripts/Daily Forecasting-Master Script_Snowflake.R', echo=TRUE)
source('C:/Users/cnguyen/Desktop/FY 2020 Forecasting/All Brand Daily Forecast_FY20/All Brand Daily Forecast_v03252019/R Scripts/Daily Forecasting-Master Script_Snowflake.R', echo=TRUE)
source('C:/Users/cnguyen/Desktop/FY 2020 Forecasting/All Brand Daily Forecast_FY20/All Brand Daily Forecast_v03252019/R Scripts/Daily Forecasting-Master Script_Snowflake.R', echo=TRUE)
